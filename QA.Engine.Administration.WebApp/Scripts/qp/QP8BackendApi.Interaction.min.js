if (jQuery.type(Quantumart) == "undefined") var Quantumart = { QP8: {} }; jQuery.type(Quantumart.QP8) == "undefined" && (Quantumart.QP8 = {}), jQuery.type(Quantumart.QP8.Interaction) == "undefined" && (Quantumart.QP8.Interaction = function () { var n = function () { }, r, t, u, i; return n.prototype = { type: "", hostUID: null, data: null }, n.Types = { ExecuteAction: 1, CloseBackendHost: 2, OpenSelectWindow: 3 }, r = function () { }, r.prototype = { actionCode: "", entityTypeCode: "", parentEntityId: 0, entityId: 0, actionUID: null, callerCallback: "", changeCurrentTab: !1, isWindow: !1, options: null }, t = function () { }, t.prototype = { initFieldValues: null, disabledFields: null, hideFields: null, disabledActionCodes: null, additionalParams: null }, t.InitFieldValue = function () { }, t.InitFieldValue.prototype = { fieldName: "", value: null }, u = function () { }, r.prototype = { selectActionCode: "", entityTypeCode: "", parentEntityId: 0, isMultiple: !1, selectedEntityIDs: null, selectWindowUID: null, callerCallback: "" }, i = function (n, t) { this.callbackProcName = n, this.callback = t, pmrpc.register({ publicProcedureName: this.callbackProcName, procedure: this.callback, isAsynchronous: !0 }) }, i.prototype = { callbackProcName: "", callback: null, dispose: function () { pmrpc.unregister(this.callback) } }, i.EventType = { HostUnbinded: 1, ActionExecuted: 2, EntitiesSelected: 3, SelectWindowClosed: 4 }, i.HostUnbindingReason = { Closed: "closed", Changed: "changed" }, { BackendEventObserver: i, ExecuteActionOtions: r, ArticleFormState: t, OpenSelectWindowOptions: u, executeBackendAction: function (t, i, r) { var u = new n; u.type = n.Types.ExecuteAction, u.hostUID = i, u.data = t, pmrpc.call({ destination: r, publicProcedureName: u.hostUID, params: [u] }) }, closeBackendHost: function (t, i, r) { var u = new n; u.type = n.Types.CloseBackendHost, u.hostUID = i, u.data = { actionUID: t }, pmrpc.call({ destination: r, publicProcedureName: u.hostUID, params: [u] }) }, openSelectWindow: function (t, i, r) { var u = new n; u.type = n.Types.OpenSelectWindow, u.hostUID = i, u.data = t, pmrpc.call({ destination: r, publicProcedureName: u.hostUID, params: [u] }) } } }());