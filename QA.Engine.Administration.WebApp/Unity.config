<?xml version="1.0"?>
<unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <!-- описываем интерфейс сервиса журналирования -->
  <alias alias="ILogger" type="QA.Core.ILogger, QA.Core"/>
  <!-- описываем конкретные классы журналирования -->
  <alias alias="Log4NetLogger" type="QA.Core.Log4NetLogger, QA.Core"/>
  <alias alias="NLogLogger" type="QA.Core.NLogLogger, QA.Core"/>
  <alias alias="IConfigurationService" type="QA.Configuration.IConfigurationService, QA.Configuration"/>
  <alias alias="ConfigurationService" type="QA.Configuration.ConfigurationService, QA.Configuration"/>
  <!--описываем интерфейс и реализацию кеш-провайдера-->
  <alias alias="ICacheProvider" type="QA.Core.ICacheProvider, QA.Core"/>
  <alias alias="CacheProvider" type="QA.Core.CacheProvider, QA.Core"/>
  <!--описываем интерфейс и реализацию универсального конфигуратора-->
  <alias alias="IAdministrationSecurityChecker" type="QA.Core.Web.IAdministrationSecurityChecker, QA.Core.Web"/>
  <alias alias="AdmininstrationSecurityChecker" type="QA.Engine.Administration.WebApp.AppCode.AdmininstrationSecurityChecker, QA.Engine.Administration.WebApp"/>
  
  <alias alias="IUnitOfWork" type="QA.Core.Data.Repository.IUnitOfWork, QA.Core.Data"/>
  <alias alias="AdminUnitOfWork" type="QA.Engine.Administration.Data.AdminUnitOfWork, QA.Engine.Administration.Data"/>
  
  <alias alias="ISiteMapRepository" type="QA.Engine.Administration.Data.ISiteMapRepository, QA.Engine.Administration.Data"/>
  <alias alias="SiteMapRepository" type="QA.Engine.Administration.Data.SiteMapRepository, QA.Engine.Administration.Data"/>
  <alias alias="ISiteMapService" type="QA.Engine.Administration.Services.ISiteMapService, QA.Engine.Administration.Services"/>
  <alias alias="SiteMapService" type="QA.Engine.Administration.Services.SiteMapService, QA.Engine.Administration.Services"/>
  <alias alias="IDictionaryRepository" type="QA.Engine.Administration.Data.IDictionaryRepository, QA.Engine.Administration.Data"/>
  <alias alias="DictionaryRepository" type="QA.Engine.Administration.Data.DictionaryRepository, QA.Engine.Administration.Data"/>
  <alias alias="IDictionaryService" type="QA.Engine.Administration.Services.IDictionaryService, QA.Engine.Administration.Services"/>
  <alias alias="DictionaryService" type="QA.Engine.Administration.Services.DictionaryService, QA.Engine.Administration.Services"/>
  <alias alias="IXmlMappingResolver" type="QA.Core.Data.IXmlMappingResolver, QA.Core.Data"/>
  <alias alias="MappingResolver" type="QA.Engine.Administration.WebApp.AppCode.MappingResolver, QA.Engine.Administration.WebApp"/>

  <alias alias="IQpHelper" type="QA.Engine.Administration.Data.IQpHelper, QA.Engine.Administration.Data"/>
  <alias alias="WebAppQpHelper" type="QA.Engine.Administration.WebApp.AppCode.WebAppQpHelper, QA.Engine.Administration.WebApp"/>
  

  <alias alias="IRegionRepository" type="QA.Engine.Administration.Data.IRegionRepository, QA.Engine.Administration.Data"/>
  <alias alias="RegionRepository" type="QA.Engine.Administration.Data.RegionRepository, QA.Engine.Administration.Data"/>
  <alias alias="IQpService" type="QA.Engine.Administration.Services.IQpService, QA.Engine.Administration.Services"/>
  <alias alias="QpService" type="QA.Engine.Administration.Services.QpService, QA.Engine.Administration.Services"/>
  <alias alias="IQpDbConnector" type="QA.Core.Data.QP.IQpDbConnector, QA.Core.Data"/>
  <alias alias="QpDbConnector" type="QA.Core.Data.QP.QpDbConnector, QA.Core.Data"/>


  <alias alias="AdminQpDbConnector" type="QA.Engine.Administration.Data.AdminQpDbConnector, QA.Engine.Administration.Data"/>
  


  <alias alias="IQpContentItem" type="QA.Core.Data.QP.IQpContentItem, QA.Core.Data"/>
  <alias alias="QpContentItem" type="QA.Core.Data.QP.QpContentItem, QA.Core.Data"/>

  <alias alias="ISiteConfiguratioFactory"                     type="QA.Engine.Administration.WebApp.Configuration.ISiteConfiguratioFactory, QA.Engine.Administration.WebApp"/>
  <alias alias="ConfigurationServiceSiteConfiguratioFactory"  type="QA.Engine.Administration.WebApp.Configuration.ConfigurationServiceSiteConfiguratioFactory, QA.Engine.Administration.WebApp"/>
  <alias alias="QPSiteConfiguratioFactory"                    type="QA.Engine.Administration.WebApp.Configuration.QPSiteConfiguratioFactory, QA.Engine.Administration.WebApp"/>

  <alias alias="QpSettingsService" type="QA.Engine.Administration.Services.QpSettingsService, QA.Engine.Administration.Services"/>
  <alias alias="IQpSettingsService" type="QA.Engine.Administration.Services.IQpSettingsService, QA.Engine.Administration.Services"/>
  

  <container name="Default">
    <register mapTo="NLogLogger" type="ILogger">
      <lifetime type="singleton"/>
      <constructor>
        <param name="fileName" value="NLog.config"/>
      </constructor>
    </register>
    <register mapTo="NLogLogger" name="Client" type="ILogger">
      <lifetime type="singleton"/>
      <constructor>
        <param name="fileName" value="NLog.config"/>
      </constructor>
    </register>
    <register mapTo="ConfigurationService" type="IConfigurationService"/>
    <register mapTo="AdmininstrationSecurityChecker" type="IAdministrationSecurityChecker">
      <lifetime type="singleton"/>
    </register>
    
    <register mapTo="CacheProvider" type="ICacheProvider">
      <lifetime type="singleton"/>
    </register>

    <register mapTo="QPSiteConfiguratioFactory" type="ISiteConfiguratioFactory">
      <lifetime type="singleton"/>
    </register>

    <register mapTo="QpSettingsService" type="IQpSettingsService">
      <lifetime type="singleton"/>
    </register>


    <register type="IQpHelper" mapTo="WebAppQpHelper" ></register>
    
    
    <register type="IQpDbConnector" mapTo="AdminQpDbConnector">
      <constructor>
        <param name="qpHelper" type="IQpHelper" />
      </constructor>
    </register>

    <register type="IQpContentItem" mapTo="QpContentItem">
    </register>

    
    
    <register type="IXmlMappingResolver" mapTo="MappingResolver" name="MappingResolver">
      <constructor>
        <param name="qpHelper" type="IQpHelper"/>
        <param name="isUnited" value="false"></param>
        <param name="cacheProvider" type="ICacheProvider"/>
      </constructor>
    </register>
    <register type="IXmlMappingResolver" mapTo="MappingResolver" name="MappingResolverUnited">
      <constructor>
        <param name="qpHelper" type="IQpHelper"/>
        <param name="isUnited" value="true"></param>
        <param name="cacheProvider" type="ICacheProvider"/>
      </constructor>
    </register>
    

    <register type="IUnitOfWork" mapTo="AdminUnitOfWork" name="Qp">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        
        <param name="qpHelper" type="IQpHelper"/>
        
        <param name="mappingSource">
          <dependency name="MappingResolver" />
        </param>
      </constructor>
    </register>

    <register type="IUnitOfWork" mapTo="AdminUnitOfWork" name="QpArchive">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        <param name="qpHelper" type="IQpHelper"/>
        
        <param name="mappingSource">
          <dependency name="MappingResolverUnited" />
        </param>
        
      </constructor>
    </register>

    <register type="ISiteMapRepository" mapTo="SiteMapRepository">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        <param name="unitOfWork">
          <dependency name="Qp" />
        </param>
      </constructor>
    </register>

    <register type="ISiteMapRepository" mapTo="SiteMapRepository" name="QpArchive">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        <param name="unitOfWork">
          <dependency name="QpArchive" />
        </param>
      </constructor>
    </register>

    <register type="ISiteMapService" mapTo="SiteMapService"></register>
    <register type="IDictionaryRepository" mapTo="DictionaryRepository">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        <param name="unitOfWork">
          <dependency name="Qp" />
        </param>
      </constructor>
    </register>

    <register type="IDictionaryService" mapTo="DictionaryService"></register>
    <register type="IQpService" mapTo="QpService"></register>
    <register type="IRegionRepository" mapTo="RegionRepository">
      <lifetime type="QA.Core.Web.HttpContextLifetimeManager, QA.Core.Web" />
      <constructor>
        <param name="unitOfWork">
          <dependency name="Qp" />
        </param>
      </constructor>
    </register>
  </container>
</unity>
